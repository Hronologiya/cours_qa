1. Создать внешний репозиторий c названием TXT.

          Переходим по ссылке https://github.com/ 
          Жмем зеленую кнопку "New" (Создаеться новый репозиторий) 
          Вводим название репозитория "TXT" 
          Жмем внизу страницы зеленую кнопку "Create repository"
       
2. Клонировать репозиторий TXT на локальный компьютер.

          Переходим на сай https://github.com 
          Выбираем с левой сторороны созданый репозиторий 
          Копируем ссылку на репозиторий
          Переходим в локальную папку на ПК
          Открываем терминал Git Bash
          Вводим команду git clone https://github.com/Hronologiya/TXT.git”
          
3. Внутри локального TXT создать файл “new.txt”.

          В терминале вводим команду: touch new.txt
          
4. Добавить файл под гит.

          В терминале вводим команду: git add new.txt
          
5. Закоммитить файл.

          В терминале вводим команду: git commit -m "new commit"
          
6. Отправить файл на внешний GitHub репозиторий.

          В терминале вводим команду: git push
          
7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). 
Всё написать в формате TXT.

          В терминале вводим команду: vim new.txt
          1)Hanaha Yevhen
          2)32
          3)1
          4)1700$
          
8. Отправить изменения на внешний репозиторий.

          В терминале вводим команду: git add . ; git commit -m "commit" ; git push
          
9. Создать файл preferences.txt

          В терминале вводим команду: touch preferences.txt
          
10. В файл preferences.txt” добавить информацию о своих предпочтениях 
(Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.

          В терминале вводим команду: vim preferences.txt
          1)Avatar
          2)Lost
          3)Vegetables
          4)Vinter
          5)Island
          
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 
           В терминале вводим команду: cat > sklls.txt
           1)Функциональному и нефункциональному тестированию сайтов и приложений 
           2)Работать в таск-трекерах 
           3)Использовать шаблоны тест-планов, тест-кейсов, сценариев и чек-листов 	
           4)Тестированию мобильных приложений 
           5)Техникам тест-дизайна 
           6)Работе в панели инструментов веб-разработчика 
           7)Основным методам автоматизации 
           8)Основам программирования на Python 
           9)Тестированию пользовательских интерфейсов
           
 12. Сделать коммит в одну строку.
 
           В терминале вводим команду: git add . ; git commit -m " comment"
           
 13. Отправить сразу 2 файла на внешний репозиторий.
 
           В терминале вводим команду: git push --all
           
 14. На веб интерфейсе создать файл bug_report.txt.
 
           Переходим по ссылке https://github.com/ 
           Переходим в репозиторий (Your repositories)
           Нажать кнопку add file
           Нажать кнопку Create new file 
           В поле name your file ввести название файла bug_report.txt
          
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
           В низу редактируемого файла делаем коммит (в поле Create new File ) затем жмем зеленную кнопку Commit new File.
 
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 
           Вибираем фаил bug_report.txt 
           Нажимаем кнопку редактировать (Карандаш Edit this File)
           Короткое описание (Summary)
           Проект (Project)
           Компонент приложения (Component)
           Номер версии (Version)
           Серьезность (Severity)
           Приоритет (Priority)
           Статус (Status)
           Автор (Author)
           Назначен на (Assigned To)
           ОС / Сервис Пак и т.д. / Браузера + версия / 
           Шаги воспроизведения (Steps to Reproduce)
           Фактический Результат (Result)
           Ожидаемый результат (Expected Result)
           
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
           Внизу файла, под  Commit changes в активной строке ввести название нового коммита, затем применить изменения, нажать кнопку Commit Changes.
 
 18. Синхронизировать внешний и локальный репозиторий TXT
 
           В терминале вводим команду: git pull


GIT Homework 1
Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.


Как отправить ДЗ на проверку.
           1. Создайте текстоовый файл как в первом ДЗ по Terminal.
           2. Сценарий перенесите в этот файл.
           3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
github.com > жмем New > вводим название репозитория (JSON)

1) 
2) 

 5. Клонировать репозиторий JSON на локальный компьютер. 
 git clone (ссылка на репозиторий)
 6. Внутри локального JSON создать файл “new.json”.
 touch new.json
 7. Добавить файл под гит.
 git add new.json
 8. Закоммитить файл.
 git commit -m "add new.json" new.json
 9. Отправить файл на внешний GitHub репозиторий.
 git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе 
 (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 11. Отправить изменения на внешний репозиторий.
 gitt add . ; git commit -am "текст коммита"
 git push
 12. Создать файл preferences.json
 touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях 
 (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 touch sklls.json
 15. Отправить сразу 2 файла на внешний репозиторий.
 gitt add . ; git commit -am "текст коммита"
 git push
 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON
 git pull


XML
 21. Создать внешний репозиторий c названием XML.
 github.com > жмем New > вводим название репозитория (XML)

1) 
2) 

 22. Клонировать репозиторий XML на локальный компьютер.
 git clone (ссылка на репозиторий)
 23. Внутри локального XML создать файл “new.xml”.
 touch new.xml
 24. Добавить файл под гит.
 git add название файла
 25. Закоммитить файл.
 git commit -m "коммит" new.xml
 26. Отправить файл на внешний GitHub репозиторий.
 git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). 
 Всё написать в формате XML.
 touch new.xml
 28. Отправить изменения на внешний репозиторий.
 git add . ; git commit -am "название_коммита" ; git push
 29. Создать файл preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях 
 (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 touch sklls.xml 
 32. Сделать коммит в одну строку.
 git add . ; git commit -am "название_коммита" 
 33. Отправить сразу 2 файла на внешний репозиторий.
 git push
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML
 git pull
